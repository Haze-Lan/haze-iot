// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: EdgeCollectService.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataCollectServiceClient is the client API for DataCollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCollectServiceClient interface {
	// 数据收集接口
	CollectData(ctx context.Context, in *DataCollections, opts ...grpc.CallOption) (*ReportReply, error)
	// 状态收集接口
	CollectState(ctx context.Context, in *StateCollections, opts ...grpc.CallOption) (*ReportReply, error)
	// 指令结果收集接口
	CollectCommandState(ctx context.Context, in *CommandStateRequest, opts ...grpc.CallOption) (*ReportReply, error)
	// 属性收集接口
	CollectAttributes(ctx context.Context, in *AttributesCollections, opts ...grpc.CallOption) (*ReportReply, error)
	// 属性收集接口
	CollectMetrics(ctx context.Context, in *MetricsCollections, opts ...grpc.CallOption) (*ReportReply, error)
}

type dataCollectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCollectServiceClient(cc grpc.ClientConnInterface) DataCollectServiceClient {
	return &dataCollectServiceClient{cc}
}

func (c *dataCollectServiceClient) CollectData(ctx context.Context, in *DataCollections, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/grpc.DataCollectService/collectData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCollectServiceClient) CollectState(ctx context.Context, in *StateCollections, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/grpc.DataCollectService/collectState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCollectServiceClient) CollectCommandState(ctx context.Context, in *CommandStateRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/grpc.DataCollectService/collectCommandState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCollectServiceClient) CollectAttributes(ctx context.Context, in *AttributesCollections, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/grpc.DataCollectService/collectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCollectServiceClient) CollectMetrics(ctx context.Context, in *MetricsCollections, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/grpc.DataCollectService/collectMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCollectServiceServer is the server API for DataCollectService service.
// All implementations must embed UnimplementedDataCollectServiceServer
// for forward compatibility
type DataCollectServiceServer interface {
	// 数据收集接口
	CollectData(context.Context, *DataCollections) (*ReportReply, error)
	// 状态收集接口
	CollectState(context.Context, *StateCollections) (*ReportReply, error)
	// 指令结果收集接口
	CollectCommandState(context.Context, *CommandStateRequest) (*ReportReply, error)
	// 属性收集接口
	CollectAttributes(context.Context, *AttributesCollections) (*ReportReply, error)
	// 属性收集接口
	CollectMetrics(context.Context, *MetricsCollections) (*ReportReply, error)
	mustEmbedUnimplementedDataCollectServiceServer()
}

// UnimplementedDataCollectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataCollectServiceServer struct {
}

func (UnimplementedDataCollectServiceServer) CollectData(context.Context, *DataCollections) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectData not implemented")
}
func (UnimplementedDataCollectServiceServer) CollectState(context.Context, *StateCollections) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectState not implemented")
}
func (UnimplementedDataCollectServiceServer) CollectCommandState(context.Context, *CommandStateRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectCommandState not implemented")
}
func (UnimplementedDataCollectServiceServer) CollectAttributes(context.Context, *AttributesCollections) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectAttributes not implemented")
}
func (UnimplementedDataCollectServiceServer) CollectMetrics(context.Context, *MetricsCollections) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMetrics not implemented")
}
func (UnimplementedDataCollectServiceServer) mustEmbedUnimplementedDataCollectServiceServer() {}

// UnsafeDataCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCollectServiceServer will
// result in compilation errors.
type UnsafeDataCollectServiceServer interface {
	mustEmbedUnimplementedDataCollectServiceServer()
}

func RegisterDataCollectServiceServer(s grpc.ServiceRegistrar, srv DataCollectServiceServer) {
	s.RegisterService(&DataCollectService_ServiceDesc, srv)
}

func _DataCollectService_CollectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCollections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectServiceServer).CollectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataCollectService/collectData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectServiceServer).CollectData(ctx, req.(*DataCollections))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCollectService_CollectState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateCollections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectServiceServer).CollectState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataCollectService/collectState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectServiceServer).CollectState(ctx, req.(*StateCollections))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCollectService_CollectCommandState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectServiceServer).CollectCommandState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataCollectService/collectCommandState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectServiceServer).CollectCommandState(ctx, req.(*CommandStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCollectService_CollectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributesCollections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectServiceServer).CollectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataCollectService/collectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectServiceServer).CollectAttributes(ctx, req.(*AttributesCollections))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCollectService_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsCollections)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectServiceServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataCollectService/collectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectServiceServer).CollectMetrics(ctx, req.(*MetricsCollections))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCollectService_ServiceDesc is the grpc.ServiceDesc for DataCollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DataCollectService",
	HandlerType: (*DataCollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "collectData",
			Handler:    _DataCollectService_CollectData_Handler,
		},
		{
			MethodName: "collectState",
			Handler:    _DataCollectService_CollectState_Handler,
		},
		{
			MethodName: "collectCommandState",
			Handler:    _DataCollectService_CollectCommandState_Handler,
		},
		{
			MethodName: "collectAttributes",
			Handler:    _DataCollectService_CollectAttributes_Handler,
		},
		{
			MethodName: "collectMetrics",
			Handler:    _DataCollectService_CollectMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EdgeCollectService.proto",
}

// CommandDistributionServiceClient is the client API for CommandDistributionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandDistributionServiceClient interface {
	//监听指令
	CommandDistribution(ctx context.Context, opts ...grpc.CallOption) (CommandDistributionService_CommandDistributionClient, error)
}

type commandDistributionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandDistributionServiceClient(cc grpc.ClientConnInterface) CommandDistributionServiceClient {
	return &commandDistributionServiceClient{cc}
}

func (c *commandDistributionServiceClient) CommandDistribution(ctx context.Context, opts ...grpc.CallOption) (CommandDistributionService_CommandDistributionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandDistributionService_ServiceDesc.Streams[0], "/grpc.CommandDistributionService/commandDistribution", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandDistributionServiceCommandDistributionClient{stream}
	return x, nil
}

type CommandDistributionService_CommandDistributionClient interface {
	Send(*CommandRequest) error
	Recv() (*CommandResponse, error)
	grpc.ClientStream
}

type commandDistributionServiceCommandDistributionClient struct {
	grpc.ClientStream
}

func (x *commandDistributionServiceCommandDistributionClient) Send(m *CommandRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commandDistributionServiceCommandDistributionClient) Recv() (*CommandResponse, error) {
	m := new(CommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandDistributionServiceServer is the server API for CommandDistributionService service.
// All implementations must embed UnimplementedCommandDistributionServiceServer
// for forward compatibility
type CommandDistributionServiceServer interface {
	//监听指令
	CommandDistribution(CommandDistributionService_CommandDistributionServer) error
	mustEmbedUnimplementedCommandDistributionServiceServer()
}

// UnimplementedCommandDistributionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandDistributionServiceServer struct {
}

func (UnimplementedCommandDistributionServiceServer) CommandDistribution(CommandDistributionService_CommandDistributionServer) error {
	return status.Errorf(codes.Unimplemented, "method CommandDistribution not implemented")
}
func (UnimplementedCommandDistributionServiceServer) mustEmbedUnimplementedCommandDistributionServiceServer() {
}

// UnsafeCommandDistributionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandDistributionServiceServer will
// result in compilation errors.
type UnsafeCommandDistributionServiceServer interface {
	mustEmbedUnimplementedCommandDistributionServiceServer()
}

func RegisterCommandDistributionServiceServer(s grpc.ServiceRegistrar, srv CommandDistributionServiceServer) {
	s.RegisterService(&CommandDistributionService_ServiceDesc, srv)
}

func _CommandDistributionService_CommandDistribution_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandDistributionServiceServer).CommandDistribution(&commandDistributionServiceCommandDistributionServer{stream})
}

type CommandDistributionService_CommandDistributionServer interface {
	Send(*CommandResponse) error
	Recv() (*CommandRequest, error)
	grpc.ServerStream
}

type commandDistributionServiceCommandDistributionServer struct {
	grpc.ServerStream
}

func (x *commandDistributionServiceCommandDistributionServer) Send(m *CommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commandDistributionServiceCommandDistributionServer) Recv() (*CommandRequest, error) {
	m := new(CommandRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandDistributionService_ServiceDesc is the grpc.ServiceDesc for CommandDistributionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandDistributionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CommandDistributionService",
	HandlerType: (*CommandDistributionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "commandDistribution",
			Handler:       _CommandDistributionService_CommandDistribution_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "EdgeCollectService.proto",
}
